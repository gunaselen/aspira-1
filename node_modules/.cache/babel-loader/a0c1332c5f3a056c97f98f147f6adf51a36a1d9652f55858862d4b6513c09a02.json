{"ast":null,"code":"import axios from \"axios\";\nimport { ActionTypes } from \"../contants/action-types\";\nimport apiURL from \"../../apis/basURL\";\nimport { useNavigate } from \"react-router-dom\";\n\n// export const fetchProdcts = (data)=> \n//     async  (dispatch) => {\n//         const response =  await apiURL.post(`/login/${data}`);\n//         dispatch({type:ActionTypes.FETCH_PRODCTS , payload: response.data})\n//     }\n\nexport const fetchProdcts = data => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    const navigate = useNavigate();\n    try {\n      const response = await apiURL.post(`/login`, data);\n      dispatch({\n        type: ActionTypes.FETCH_PRODCTS,\n        payload: response.data\n      });\n\n      // Assuming you have some way to get the token from the response\n      const token = response.data.token;\n\n      // Save the token in the store or wherever you are storing it\n      dispatch({\n        type: ActionTypes.SET_TOKEN,\n        payload: token\n      });\n\n      // Redirect to \"/\"\n      // Assuming you are using some library or component for navigation\n      // Replace it with the actual method to navigate to \"/\"\n      // (e.g., this.props.history.push(\"/\") in a class component or useHistory() in a functional component)\n      navigate(\"/\");\n    } catch (error) {\n      // Handle error here, you might want to dispatch an error action\n      console.error(\"Error fetching products:\", error);\n    }\n  }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n    return [useNavigate];\n  });\n};\n\n// export const setProducts =(Products)=> {\n//     return {\n//         type:ActionTypes.SET_PRODUCTS,\n//         payload:Products\n//     };\n// };\n\n// export const selectedProducts =(Product)=> {\n//     return {\n//         type:ActionTypes.SELECTED_PRODUCT,\n//         payload:Product\n//     };\n// };","map":{"version":3,"names":["axios","ActionTypes","apiURL","useNavigate","fetchProdcts","data","_s","$RefreshSig$","dispatch","navigate","response","post","type","FETCH_PRODCTS","payload","token","SET_TOKEN","error","console"],"sources":["C:/Users/CIPL1404/Downloads/Archive/src/rexdux/actions/productionActions.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { ActionTypes } from \"../contants/action-types\";\nimport apiURL from \"../../apis/basURL\";\nimport { useNavigate } from \"react-router-dom\";\n\n// export const fetchProdcts = (data)=> \n//     async  (dispatch) => {\n//         const response =  await apiURL.post(`/login/${data}`);\n//         dispatch({type:ActionTypes.FETCH_PRODCTS , payload: response.data})\n//     }\n    \n\n    \n\n    export const fetchProdcts = (data) => async (dispatch) => {\n        const navigate = useNavigate()\n        try {\n          const response = await apiURL.post(`/login`, data);\n          dispatch({ type: ActionTypes.FETCH_PRODCTS, payload: response.data });\n      \n          // Assuming you have some way to get the token from the response\n          const token = response.data.token;\n      \n          // Save the token in the store or wherever you are storing it\n          dispatch({ type: ActionTypes.SET_TOKEN, payload: token });\n      \n          // Redirect to \"/\"\n          // Assuming you are using some library or component for navigation\n          // Replace it with the actual method to navigate to \"/\"\n          // (e.g., this.props.history.push(\"/\") in a class component or useHistory() in a functional component)\n          navigate(\"/\");\n        } catch (error) {\n          // Handle error here, you might want to dispatch an error action\n          console.error(\"Error fetching products:\", error);\n        }\n      };\n\n\n// export const setProducts =(Products)=> {\n//     return {\n//         type:ActionTypes.SET_PRODUCTS,\n//         payload:Products\n//     };\n// };\n\n// export const selectedProducts =(Product)=> {\n//     return {\n//         type:ActionTypes.SELECTED_PRODUCT,\n//         payload:Product\n//     };\n// };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,0BAA0B;AACtD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;;AAKI,OAAO,MAAMC,YAAY,GAAIC,IAAI;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,OAAAD,EAAA,CAAK,MAAOE,QAAQ,IAAK;IAAAF,EAAA;IACtD,MAAMG,QAAQ,GAAGN,WAAW,CAAC,CAAC;IAC9B,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMR,MAAM,CAACS,IAAI,CAAE,QAAO,EAAEN,IAAI,CAAC;MAClDG,QAAQ,CAAC;QAAEI,IAAI,EAAEX,WAAW,CAACY,aAAa;QAAEC,OAAO,EAAEJ,QAAQ,CAACL;MAAK,CAAC,CAAC;;MAErE;MACA,MAAMU,KAAK,GAAGL,QAAQ,CAACL,IAAI,CAACU,KAAK;;MAEjC;MACAP,QAAQ,CAAC;QAAEI,IAAI,EAAEX,WAAW,CAACe,SAAS;QAAEF,OAAO,EAAEC;MAAM,CAAC,CAAC;;MAEzD;MACA;MACA;MACA;MACAN,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;IAAA,QApBkBd,WAAW;EAAA;AAAA,CAoB7B;;AAGP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}