{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CIPL1404\\\\Downloads\\\\Archive\\\\src\\\\components\\\\pagnation\\\\pagnation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\nimport \"./pagnation.scss\";\n\n// Example items, to simulate fetching from another resources.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nfunction Items({\n  currentItems\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n_c = Items;\nfunction Pagnation({\n  itemsPerPage\n}) {\n  _s();\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n  const endOffset = itemOffset + itemsPerPage;\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n  const currentItems = items.slice(itemOffset, endOffset);\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"Next\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"prev\",\n      renderOnZeroPageCount: null,\n      className: \"pagnation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Pagnation, \"T5lRYnT7FeIRYhFW34vLrQET4eA=\");\n_c2 = Pagnation;\nexport default Pagnation;\nvar _c, _c2;\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"Pagnation\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","ReactPaginate","jsxDEV","_jsxDEV","Fragment","_Fragment","items","Items","currentItems","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pagnation","itemsPerPage","_s","itemOffset","setItemOffset","endOffset","console","log","slice","pageCount","Math","ceil","length","handlePageClick","event","newOffset","selected","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","className","_c2","$RefreshReg$"],"sources":["C:/Users/CIPL1404/Downloads/Archive/src/components/pagnation/pagnation.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactPaginate from 'react-paginate';\r\nimport \"./pagnation.scss\"\r\n\r\n\r\n\r\n// Example items, to simulate fetching from another resources.\r\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\r\nfunction Items({ currentItems }) {\r\n  return (\r\n    <>\r\n      {currentItems &&\r\n        currentItems.map((item) => (\r\n          <div>\r\n            <h3>Item #{item}</h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Pagnation({ itemsPerPage }) {\r\n\r\n    \r\n    // Here we use item offsets; we could also use page offsets\r\n    // following the API or data you're working with.\r\n    const [itemOffset, setItemOffset] = useState(0);\r\n\r\n    const endOffset = itemOffset + itemsPerPage;\r\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n    const currentItems = items.slice(itemOffset, endOffset);\r\n    const pageCount = Math.ceil(items.length / itemsPerPage);\r\n  \r\n    // Invoke when user click to request another page.\r\n    const handlePageClick = (event) => {\r\n      const newOffset = (event.selected * itemsPerPage) % items.length;\r\n      console.log(\r\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n      );\r\n      setItemOffset(newOffset);\r\n    };\r\n  \r\n    return (\r\n      <>\r\n        {/* <Items currentItems={currentItems} /> */}\r\n        <ReactPaginate\r\n          breakLabel=\"...\"\r\n          nextLabel=\"Next\"\r\n          onPageChange={handlePageClick}\r\n          pageRangeDisplayed={5}\r\n          pageCount={pageCount}\r\n          previousLabel=\"prev\"\r\n          renderOnZeroPageCount={null}\r\n          className='pagnation'\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\nexport default Pagnation\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAO,kBAAkB;;AAIzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAE7D,SAASC,KAAKA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAC/B,oBACEL,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACGD,YAAY,IACXA,YAAY,CAACE,GAAG,CAAEC,IAAI,iBACpBR,OAAA;MAAAM,QAAA,eACEN,OAAA;QAAAM,QAAA,GAAI,QAAM,EAACE,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAC,gBACJ,CAAC;AAEP;AAACC,EAAA,GAXQT,KAAK;AAad,SAASU,SAASA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAGjC;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMuB,SAAS,GAAGF,UAAU,GAAGF,YAAY;EAC3CK,OAAO,CAACC,GAAG,CAAE,sBAAqBJ,UAAW,OAAME,SAAU,EAAC,CAAC;EAC/D,MAAMd,YAAY,GAAGF,KAAK,CAACmB,KAAK,CAACL,UAAU,EAAEE,SAAS,CAAC;EACvD,MAAMI,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACtB,KAAK,CAACuB,MAAM,GAAGX,YAAY,CAAC;;EAExD;EACA,MAAMY,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAQ,GAAGf,YAAY,GAAIZ,KAAK,CAACuB,MAAM;IAChEN,OAAO,CAACC,GAAG,CACR,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAC7E,CAAC;IACDX,aAAa,CAACW,SAAS,CAAC;EAC1B,CAAC;EAED,oBACE7B,OAAA,CAAAE,SAAA;IAAAI,QAAA,eAEEN,OAAA,CAACF,aAAa;MACZiC,UAAU,EAAC,KAAK;MAChBC,SAAS,EAAC,MAAM;MAChBC,YAAY,EAAEN,eAAgB;MAC9BO,kBAAkB,EAAE,CAAE;MACtBX,SAAS,EAAEA,SAAU;MACrBY,aAAa,EAAC,MAAM;MACpBC,qBAAqB,EAAE,IAAK;MAC5BC,SAAS,EAAC;IAAW;MAAA5B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC,gBACF,CAAC;AAEP;AAACI,EAAA,CApCMF,SAAS;AAAAwB,GAAA,GAATxB,SAAS;AAsClB,eAAeA,SAAS;AAAA,IAAAD,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}